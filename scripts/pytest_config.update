#!/usr/bin/env python
import argparse
import ConfigParser
import os
import sys

from pytest_config import (
    add_project_to_pytest_path,
    update_confg_version,
    pretty
)

HOME = os.environ['HOME']
TEMPLATES_REL_DIR = '.pytest_config/templates'
src = lambda f: os.path.join(HOME, TEMPLATES_REL_DIR, f)

PROJECT_DIR = os.environ['PWD']
dest = lambda f: os.path.join(PROJECT_DIR, f)

TEMPLATE_PATHS = {
    'pytest.ini': {'src': src('pytest.ini'), 'dest': dest('pytest.ini')},
    '.coveragerc': {'src': src('coveragerc'), 'dest': dest('.coveragerc')}
}

###############################################################################
# Define command line arguments
###############################################################################
desc = 'Keep py.test configuration files for this project up-to-date.'
parser = argparse.ArgumentParser(description=desc)

parser.add_argument('-q', '--noinput',
                    dest='quiet', action='store_true', default=False,
                    help='Do not prompt for anything.')
parser.add_argument('--coverage',
                    dest='update_coveragerc', action='store_true',
                    default=False, help='Update .coveragerc file excluding '
                    'other files not explicitly requested.')
parser.add_argument('--pytest-ini',
                    dest='update_pytestini', action='store_true',
                    default=False, help='Update pytest.ini file excluding '
                    'other files not explicitly requested.')

args = parser.parse_args()


###############################################################################
# Updater functions
###############################################################################
def update_config_file_defaults(template):
    """
    Updates a pytest_config configuration file by interactively merging
    the defaults into the current, customized project configuration.

    :param str template: The key to a template in TEMPLATE_PATHS global

    """
    default_config = ConfigParser.ConfigParser()
    try:
        with open(TEMPLATE_PATHS[template]['src']) as defaults:
            default_config.readfp(defaults)
    except IOError:
        pretty._print_error('ERROR: Unable to update. The template for', template,
                     'is missing. Please check that or reinstall pytest_config'
                     'to fix this.')
        sys.exit(1)

    config = ConfigParser.ConfigParser()
    try:
        with open(TEMPLATE_PATHS[template]['dest']) as current:
            config.readfp(current)
            short_name = current.name.rsplit('/', 1)[-1]
    except IOError:
        pretty._print_error('ERROR: Unable to update. Missing local', template,
                     'file. Please run `pytest_config.init` first')
        sys.exit(1)

    pretty._print_warning('Updating ', short_name, '\b...', new_line=False)

    # Check if an update is necessary
    up_to_date = False
    for section in default_config.sections():
        up_to_date = default_config.items(section) == config.items(section)
        if not up_to_date:
            break

    if up_to_date:
        # Everything is up-to-date, exit
        pretty._print_success(' [UP TO DATE]')
        update_confg_version(TEMPLATE_PATHS, template)
        return

    # Changes detected, perform interactive update
    for section in default_config.sections():
        pretty._print_color(['\nSection:', [section]], bold=True, new_line=False)
        if default_config.items(section) == config.items(section):
            # Section up-to-date, move to the next
            pretty._print_success(' [UP TO DATE]\n', new_line=False)
            continue
        print ''
        for name, default in default_config.items(section):
            # ask if they want to keep it or use the default
            if config.has_option(section, name) and \
                config.get(section, name) != default:
                if not args.quiet:
                    # @TODO: Read and compare multiple values in the same line
                    # and ask whether to keep/replace individual differences.
                    pretty._print_color(['*%s:' % name], bold=True)
                    print pretty.colorize_text('  default: %s' % default,
                                                color=pretty.RED)
                    print pretty.colorize_text(
                        '  current: %s' % config.get(section, name),
                        color=pretty.GREEN)
                    prompt_msg = '  Keep the current value? [y/n] > '
                    keep_current = raw_input(prompt_msg).lower()
                    if keep_current == 'y':
                        continue
            config.set(section, name, default)

    with open(TEMPLATE_PATHS[template]['dest'], 'w') as current:
        config.write(current)
    update_confg_version(TEMPLATE_PATHS, template)


def main():
    # update only the requested file(s)
    if any([args.update_coveragerc, args.update_pytestini]):
        if args.update_coveragerc:
            update_config_file_defaults('.coveragerc')
        elif args.update_pytestini:
            update_config_file_defaults('pytest.ini')

    else:  # update all files
        update_config_file_defaults('.coveragerc')
        update_config_file_defaults('pytest.ini')

    add_project_to_pytest_path()


if __name__ == '__main__':
    main()
else:
    parser.print_help()
